(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{94:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return i})),a.d(n,"metadata",(function(){return o})),a.d(n,"toc",(function(){return d})),a.d(n,"default",(function(){return p}));var r=a(3),t=a(7),l=(a(0),a(99)),c=["components"],i={id:"getting-started",title:"Getting started"},o={unversionedId:"getting-started",id:"getting-started",isDocsHomePage:!1,title:"Getting started",description:"Getting started",source:"@site/docs/getting-started.md",slug:"/getting-started",permalink:"/hlf-operator/docs/getting-started",editUrl:"https://github.com/hyperledger-labs/hlf-operator/edit/master/website/docs/getting-started.md",version:"current",sidebar:"someSidebar1",previous:{title:"Introduction",permalink:"/hlf-operator/docs/"},next:{title:"Certificate Authority",permalink:"/hlf-operator/docs/ca"}},d=[{value:"Getting started",id:"getting-started",children:[{value:"Requirements",id:"requirements",children:[]},{value:"Install Istio",id:"install-istio",children:[]},{value:"Installing the operator",id:"installing-the-operator",children:[]},{value:"Installing the Kubectl HLF Plugin",id:"installing-the-kubectl-hlf-plugin",children:[]}]},{value:"Deploy a Peer Organization",id:"deploy-a-peer-organization",children:[{value:"Setup versions",id:"setup-versions",children:[]},{value:"Deploying a Certificate Authority",id:"deploying-a-certificate-authority",children:[]},{value:"Deploying a peer",id:"deploying-a-peer",children:[]}]},{value:"Deploying an Ordering Service",id:"deploying-an-ordering-service",children:[{value:"Deploying a certificate authority",id:"deploying-a-certificate-authority-1",children:[]},{value:"Deploying the Orderer nodes node",id:"deploying-the-orderer-nodes-node",children:[]}]},{value:"Preparing a connection string for the ordering service",id:"preparing-a-connection-string-for-the-ordering-service",children:[]},{value:"Create a channel",id:"create-a-channel",children:[]},{value:"Preparing a connection string for the peer",id:"preparing-a-connection-string-for-the-peer",children:[]},{value:"Join channel",id:"join-channel",children:[]},{value:"Inspect the channel",id:"inspect-the-channel",children:[]},{value:"Add anchor peer",id:"add-anchor-peer",children:[]},{value:"See ledger height",id:"see-ledger-height",children:[]},{value:"Install a chaincode",id:"install-a-chaincode",children:[]},{value:"Deploy chaincode",id:"deploy-chaincode",children:[]},{value:"Query chaincodes installed",id:"query-chaincodes-installed",children:[]},{value:"Approve chaincode",id:"approve-chaincode",children:[]},{value:"Commit chaincode",id:"commit-chaincode",children:[]},{value:"Invoke a transaction in the ledger",id:"invoke-a-transaction-in-the-ledger",children:[]},{value:"Query the ledger",id:"query-the-ledger",children:[]},{value:"Cleanup the environment",id:"cleanup-the-environment",children:[]},{value:"Troubleshooting",id:"troubleshooting",children:[{value:"Chaincode installation/build error",id:"chaincode-installationbuild-error",children:[]}]}],s={toc:d};function p(e){var n=e.components,a=Object(t.a)(e,c);return Object(l.b)("wrapper",Object(r.a)({},s,a,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"getting-started"},"Getting started"),Object(l.b)("h3",{id:"requirements"},"Requirements"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Fabric CA client"),Object(l.b)("li",{parentName:"ul"},"YQ binary to replace values in YAML (for the getting started)"),Object(l.b)("li",{parentName:"ul"},"KubeCTL"),Object(l.b)("li",{parentName:"ul"},"Kubernetes 1.15+"),Object(l.b)("li",{parentName:"ul"},"Istio")),Object(l.b)("h3",{id:"install-istio"},"Install Istio"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f ./hack/istio-operator/crds/*\nhelm template ./hack/istio-operator/ \\\n  --set hub=docker.io/istio \\\n  --set tag=1.8.0 \\\n  --set operatorNamespace=istio-operator \\\n  --set watchedNamespaces=istio-system | kubectl apply -f -\n\nkubectl create ns istio-system\nkubectl apply -n istio-system -f ./hack/istio-operator.yaml\n")),Object(l.b)("h3",{id:"installing-the-operator"},"Installing the operator"),Object(l.b)("p",null,"Add the helm chartrepository: "),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"helm repo add kfs https://kfsoftware.github.io/hlf-helm-charts --force-update \n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"helm install hlf-operator --version=1.6.0 kfs/hlf-operator\n")),Object(l.b)("h3",{id:"installing-the-kubectl-hlf-plugin"},"Installing the Kubectl HLF Plugin"),Object(l.b)("p",null,"To install the Kubectl HLF Plugin, run the following command:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl krew install hlf\n")),Object(l.b)("p",null,"To update the Kubectl HLF Plugin to the latest version, run the following command:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"}," kubectl krew upgrade hlf \n")),Object(l.b)("h2",{id:"deploy-a-peer-organization"},"Deploy a Peer Organization"),Object(l.b)("h3",{id:"setup-versions"},"Setup versions"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"export PEER_IMAGE=hyperledger/fabric-peer\nexport PEER_VERSION=2.4.3\n\nexport ORDERER_IMAGE=hyperledger/fabric-orderer\nexport ORDERER_VERSION=2.4.3\n\n")),Object(l.b)("h3",{id:"deploying-a-certificate-authority"},"Deploying a Certificate Authority"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf ca create --storage-class=standard --capacity=2Gi --name=org1-ca \\\n    --enroll-id=enroll --enroll-pw=enrollpw  \nkubectl wait --timeout=180s --for=condition=Running fabriccas.hlf.kungfusoftware.es --all\n\n# register user for the peers\nkubectl hlf ca register --name=org1-ca --user=peer --secret=peerpw --type=peer \\\n --enroll-id enroll --enroll-secret=enrollpw --mspid Org1MSP\n")),Object(l.b)("h3",{id:"deploying-a-peer"},"Deploying a peer"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"\nkubectl hlf peer create --statedb=couchdb --image=$PEER_IMAGE --version=$PEER_VERSION --storage-class=standard --enroll-id=peer --mspid=Org1MSP \\\n        --enroll-pw=peerpw --capacity=5Gi --name=org1-peer0 --ca-name=org1-ca.default\nkubectl wait --timeout=180s --for=condition=Running fabricpeers.hlf.kungfusoftware.es --all\n")),Object(l.b)("h2",{id:"deploying-an-ordering-service"},"Deploying an Ordering Service"),Object(l.b)("h3",{id:"deploying-a-certificate-authority-1"},"Deploying a certificate authority"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf ca create --storage-class=standard --capacity=2Gi --name=ord-ca \\\n    --enroll-id=enroll --enroll-pw=enrollpw\nkubectl wait --timeout=180s --for=condition=Running fabriccas.hlf.kungfusoftware.es --all\nkubectl hlf ca register --name=ord-ca --user=orderer --secret=ordererpw \\\n    --type=orderer --enroll-id enroll --enroll-secret=enrollpw --mspid=OrdererMSP\n\n")),Object(l.b)("h3",{id:"deploying-the-orderer-nodes-node"},"Deploying the Orderer nodes node"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf ordnode create --image=$ORDERER_IMAGE --version=$ORDERER_VERSION \\\n    --storage-class=standard --enroll-id=orderer --mspid=OrdererMSP \\\n    --enroll-pw=ordererpw --capacity=2Gi --name=ord-node1 --ca-name=ord-ca.default\nkubectl wait --timeout=180s --for=condition=Running fabricorderernodes.hlf.kungfusoftware.es --all\n")),Object(l.b)("h2",{id:"preparing-a-connection-string-for-the-ordering-service"},"Preparing a connection string for the ordering service"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf inspect --output ordservice.yaml -o OrdererMSP\nkubectl hlf ca register --name=ord-ca --user=admin --secret=adminpw \\\n    --type=admin --enroll-id enroll --enroll-secret=enrollpw --mspid=OrdererMSP\n\nkubectl hlf ca enroll --name=ord-ca --user=admin --secret=adminpw --mspid OrdererMSP \\\n        --ca-name ca  --output admin-ordservice.yaml \n## add user from admin-ordservice.yaml to ordservice.yaml\nkubectl hlf utils adduser --userPath=admin-ordservice.yaml --config=ordservice.yaml --username=admin --mspid=OrdererMSP\n")),Object(l.b)("h2",{id:"create-a-channel"},"Create a channel"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf channel generate --output=demo.block --name=demo --organizations Org1MSP --ordererOrganizations OrdererMSP\n\n# enroll using the TLS CA\nkubectl hlf ca enroll --name=ord-ca --namespace=default --user=admin --secret=adminpw --mspid OrdererMSP \\\n        --ca-name tlsca  --output admin-tls-ordservice.yaml \n\nkubectl hlf ordnode join --block=demo.block --name=ord-node1 --namespace=default --identity=admin-tls-ordservice.yaml\n\n")),Object(l.b)("h2",{id:"preparing-a-connection-string-for-the-peer"},"Preparing a connection string for the peer"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf ca register --name=org1-ca --user=admin --secret=adminpw --type=admin \\\n --enroll-id enroll --enroll-secret=enrollpw --mspid Org1MSP  \n\nkubectl hlf ca enroll --name=org1-ca --user=admin --secret=adminpw --mspid Org1MSP \\\n        --ca-name ca  --output peer-org1.yaml\n\nkubectl hlf inspect --output org1.yaml -o Org1MSP -o OrdererMSP\n\n## add user key and cert to org1.yaml from admin-ordservice.yaml\nkubectl hlf utils adduser --userPath=peer-org1.yaml --config=org1.yaml --username=admin --mspid=Org1MSP\n")),Object(l.b)("h2",{id:"join-channel"},"Join channel"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf channel join --name=demo --config=org1.yaml \\\n    --user=admin -p=org1-peer0.default\n\n")),Object(l.b)("h2",{id:"inspect-the-channel"},"Inspect the channel"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf channel inspect --channel=demo --config=org1.yaml \\\n    --user=admin -p=org1-peer0.default > demo.json\n")),Object(l.b)("h2",{id:"add-anchor-peer"},"Add anchor peer"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf channel addanchorpeer --channel=demo --config=org1.yaml \\\n    --user=admin --peer=org1-peer0.default \n\n")),Object(l.b)("h2",{id:"see-ledger-height"},"See ledger height"),Object(l.b)("p",null,"In case of error, you may need to add the following to the org1.yaml configuration file:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-yaml"},'channels:\n  _default:\n    orderers:\n      - ord-node1.default\n    peers:\n      "org1-peer0.default":\n        endorsingPeer: true\n        chaincodeQuery: true\n        ledgerQuery: true\n        eventSource: true\n\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf channel top --channel=demo --config=org1.yaml \\\n    --user=admin -p=org1-peer0.default\n")),Object(l.b)("h2",{id:"install-a-chaincode"},"Install a chaincode"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},'# remove the code.tar.gz asset-transfer-basic-external.tgz if they exist\nrm code.tar.gz asset-transfer-basic-external.tgz\nexport CHAINCODE_NAME=asset\nexport CHAINCODE_LABEL=asset\ncat << METADATA-EOF > "metadata.json"\n{\n    "type": "ccaas",\n    "label": "${CHAINCODE_LABEL}"\n}\nMETADATA-EOF\n\ncat > "connection.json" <<CONN_EOF\n{\n  "address": "${CHAINCODE_NAME}:7052",\n  "dial_timeout": "10s",\n  "tls_required": false\n}\nCONN_EOF\n\ntar cfz code.tar.gz connection.json\ntar cfz asset-transfer-basic-external.tgz metadata.json code.tar.gz\nexport PACKAGE_ID=$(kubectl hlf chaincode calculatepackageid --path=asset-transfer-basic-external.tgz --language=node --label=$CHAINCODE_LABEL)\necho "PACKAGE_ID=$PACKAGE_ID"\n\nkubectl hlf chaincode install --path=./asset-transfer-basic-external.tgz \\\n    --config=org1.yaml --language=golang --label=$CHAINCODE_LABEL --user=admin --peer=org1-peer0.default\n\n# this can take 3-4 minutes\n')),Object(l.b)("h2",{id:"deploy-chaincode"},"Deploy chaincode"),Object(l.b)("p",null,"The following command will create or update the CRD based on the packageID, chaincode name and image."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf externalchaincode sync --image=kfsoftware/chaincode-external:latest \\\n    --name=$CHAINCODE_NAME \\\n    --namespace=default \\\n    --package-id=$PACKAGE_ID \\\n    --tls-required=false \\\n    --replicas=1\n")),Object(l.b)("h2",{id:"query-chaincodes-installed"},"Query chaincodes installed"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf chaincode queryinstalled --config=org1.yaml --user=admin --peer=org1-peer0.default\n")),Object(l.b)("h2",{id:"approve-chaincode"},"Approve chaincode"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},'export SEQUENCE=1\nexport VERSION="1.0"\nkubectl hlf chaincode approveformyorg --config=org1.yaml --user=admin --peer=org1-peer0.default \\\n    --package-id=$PACKAGE_ID \\\n    --version "$VERSION" --sequence "$SEQUENCE" --name=asset \\\n    --policy="OR(\'Org1MSP.member\')" --channel=demo\n')),Object(l.b)("h2",{id:"commit-chaincode"},"Commit chaincode"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},'kubectl hlf chaincode commit --config=org1.yaml --user=admin --mspid=Org1MSP \\\n    --version "$VERSION" --sequence "$SEQUENCE" --name=asset \\\n    --policy="OR(\'Org1MSP.member\')" --channel=demo\n')),Object(l.b)("h2",{id:"invoke-a-transaction-in-the-ledger"},"Invoke a transaction in the ledger"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf chaincode invoke --config=org1.yaml \\\n    --user=admin --peer=org1-peer0.default \\\n    --chaincode=asset --channel=demo \\\n    --fcn=initLedger -a '[]'\n")),Object(l.b)("h2",{id:"query-the-ledger"},"Query the ledger"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf chaincode query --config=org1.yaml \\\n    --user=admin --peer=org1-peer0.default \\\n    --chaincode=asset --channel=demo \\\n    --fcn=GetAllAssets -a '[]'\n")),Object(l.b)("p",null,"At this point, you should have:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Ordering service with 1 nodes and a CA"),Object(l.b)("li",{parentName:"ul"},"Peer organization with a peer and a CA"),Object(l.b)("li",{parentName:"ul"},"A channel ",Object(l.b)("strong",{parentName:"li"},"demo")),Object(l.b)("li",{parentName:"ul"},"A chaincode install in peer0"),Object(l.b)("li",{parentName:"ul"},"A chaincode approved and committed")),Object(l.b)("p",null,"If something went wrong or didn't work, please, open an issue."),Object(l.b)("h2",{id:"cleanup-the-environment"},"Cleanup the environment"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl delete fabricorderernodes.hlf.kungfusoftware.es --all-namespaces --all\nkubectl delete fabricpeers.hlf.kungfusoftware.es --all-namespaces --all\nkubectl delete fabriccas.hlf.kungfusoftware.es --all-namespaces --all\n")),Object(l.b)("h2",{id:"troubleshooting"},"Troubleshooting"),Object(l.b)("h3",{id:"chaincode-installationbuild-error"},"Chaincode installation/build error"),Object(l.b)("p",null,"Chaincode installation/build can fail due to unsupported local kubertenes version such as ",Object(l.b)("a",{parentName:"p",href:"https://github.com/kubernetes/minikube"},"minikube"),"."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-shell"},"$ kubectl hlf chaincode install --path=./fixtures/chaincodes/fabcar/go \\\n        --config=org1.yaml --language=golang --label=fabcar --user=admin --peer=org1-peer0.default\n        \nError: Transaction processing for endorser [192.168.49.2:31278]: Chaincode status Code: (500) UNKNOWN. \nDescription: failed to invoke backing implementation of 'InstallChaincode': could not build chaincode: \nexternal builder failed: external builder failed to build: external builder 'my-golang-builder' failed:\nexit status 1\n")),Object(l.b)("p",null,"If your purpose is to test the hlf-operator please consider to switch to ",Object(l.b)("a",{parentName:"p",href:"https://github.com/kubernetes-sigs/kind"},"kind")," that is tested and supported."))}p.isMDXComponent=!0},99:function(e,n,a){"use strict";a.d(n,"a",(function(){return p})),a.d(n,"b",(function(){return h}));var r=a(0),t=a.n(r);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function c(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?c(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var d=t.a.createContext({}),s=function(e){var n=t.a.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},p=function(e){var n=s(e.components);return t.a.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.a.createElement(t.a.Fragment,{},n)}},b=t.a.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=s(a),b=r,h=p["".concat(c,".").concat(b)]||p[b]||u[b]||l;return a?t.a.createElement(h,i(i({ref:n},d),{},{components:a})):t.a.createElement(h,i({ref:n},d))}));function h(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,c=new Array(l);c[0]=b;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var d=2;d<l;d++)c[d]=a[d];return t.a.createElement.apply(null,c)}return t.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);