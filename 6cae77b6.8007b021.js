(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{124:function(e,r,n){"use strict";n.d(r,"a",(function(){return p})),n.d(r,"b",(function(){return g}));var t=n(0),a=n.n(t);function l(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){l(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function o(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),u=function(e){var r=a.a.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},p=function(e){var r=u(e.components);return a.a.createElement(c.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return a.a.createElement(a.a.Fragment,{},r)}},b=a.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),b=t,g=p["".concat(i,".").concat(b)]||p[b]||d[b]||l;return n?a.a.createElement(g,s(s({ref:r},c),{},{components:n})):a.a.createElement(g,s({ref:r},c))}));function g(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var l=n.length,i=new Array(l);i[0]=b;var s={};for(var o in r)hasOwnProperty.call(r,o)&&(s[o]=r[o]);s.originalType=e,s.mdxType="string"==typeof e?e:t,i[1]=s;for(var c=2;c<l;c++)i[c]=n[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},91:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return s})),n.d(r,"metadata",(function(){return o})),n.d(r,"toc",(function(){return c})),n.d(r,"default",(function(){return p}));var t=n(3),a=n(7),l=(n(0),n(124)),i=["components"],s={id:"enroll-users",title:"Register & Enroll users"},o={unversionedId:"user-guide/enroll-users",id:"user-guide/enroll-users",isDocsHomePage:!1,title:"Register & Enroll users",description:"Registering users",source:"@site/docs/user-guide/enroll-users.md",slug:"/user-guide/enroll-users",permalink:"/hlf-operator/docs/user-guide/enroll-users",editUrl:"https://github.com/hyperledger-labs/hlf-operator/edit/master/website/docs/user-guide/enroll-users.md",version:"current",sidebar:"someSidebar1",previous:{title:"Install Chaincode",permalink:"/hlf-operator/docs/user-guide/install-chaincode"},next:{title:"Develop chaincode locally",permalink:"/hlf-operator/docs/user-guide/develop-chaincode-locally"}},c=[{value:"Registering users",id:"registering-users",children:[]},{value:"Registering users with attributes",id:"registering-users-with-attributes",children:[]},{value:"Enrolling users in the TLS CA",id:"enrolling-users-in-the-tls-ca",children:[]},{value:"Enrolling users in the Sign CA",id:"enrolling-users-in-the-sign-ca",children:[]},{value:"Enrolling users in the Sign CA with attributes",id:"enrolling-users-in-the-sign-ca-with-attributes",children:[]}],u={toc:c};function p(e){var r=e.components,n=Object(a.a)(e,i);return Object(l.b)("wrapper",Object(t.a)({},u,n,{components:r,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"registering-users"},"Registering users"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"ENROLL_ID=enroll # enroll id for the CA, default `enroll`\nENROLL_SECRET=enrollpw # enroll secret for the CA, default `enrollpw`\nUSER_TYPE=peer # can be `peer`, `orderer`, `client` or `admin`\nUSER_NAME=peer\nUSER_SECRET=peerpw\nMSP_ID=Org1MSP\nkubectl hlf ca register --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user $USER --secret=$USER_SECRET --type=$USER_TYPE \\\n    --enroll-id=$ENROLL_ID --enroll-secret=$ENROLL_SECRET \\\n    --mspid $MSP_ID\n")),Object(l.b)("h2",{id:"registering-users-with-attributes"},"Registering users with attributes"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},'ENROLL_ID=enroll # enroll id for the CA, default `enroll`\nENROLL_SECRET=enrollpw # enroll secret for the CA, default `enrollpw`\nUSER_TYPE=peer # can be `peer`, `orderer`, `client` or `admin`\nUSER_NAME=peer\nUSER_SECRET=peerpw\nMSP_ID=Org1MSP\nkubectl hlf ca register --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user $USER --secret=$USER_SECRET --type=$USER_TYPE \\\n    --enroll-id=$ENROLL_ID --enroll-secret=$ENROLL_SECRET \\\n    --mspid $MSP_ID --attributes="isAdmin=true,anotherAttribute=foo"\n')),Object(l.b)("h2",{id:"enrolling-users-in-the-tls-ca"},"Enrolling users in the TLS CA"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"CA_NAME=org1-ca\nCA_NAMESPACE=default\nCA_MSPID=Org1MSP\nCA_TYPE=ca # can be `ca` or `tlsca`\nkubectl hlf ca enroll --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user=admin --secret=adminpw --mspid $CA_MSPID \\\n    --ca-name $CA_TYPE  --output user.yaml \n")),Object(l.b)("h2",{id:"enrolling-users-in-the-sign-ca"},"Enrolling users in the Sign CA"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"CA_NAME=org1-ca\nCA_NAMESPACE=default\nCA_MSPID=Org1MSP\nCA_TYPE=tlsca # can be `ca` or `tlsca`\nkubectl hlf ca enroll --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user=admin --secret=adminpw --mspid $CA_MSPID \\\n    --ca-name $CA_TYPE  --output user.yaml \n")),Object(l.b)("h2",{id:"enrolling-users-in-the-sign-ca-with-attributes"},"Enrolling users in the Sign CA with attributes"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},'CA_NAME=org1-ca\nCA_NAMESPACE=default\nCA_MSPID=Org1MSP\nCA_TYPE=tlsca # can be `ca` or `tlsca`\nkubectl hlf ca enroll --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user=admin --secret=adminpw --mspid $CA_MSPID \\\n    --ca-name $CA_TYPE  --output user.yaml --attributes="isAdmin,anotherAttribute:opt" # for optional attributes\n')))}p.isMDXComponent=!0}}]);