/*
 * Copyright Kungfusoftware.es. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kfsoftware/hlf-operator/api/hlf.kungfusoftware.es/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FabricChaincodeTemplateLister helps list FabricChaincodeTemplates.
// All objects returned here must be treated as read-only.
type FabricChaincodeTemplateLister interface {
	// List lists all FabricChaincodeTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FabricChaincodeTemplate, err error)
	// FabricChaincodeTemplates returns an object that can list and get FabricChaincodeTemplates.
	FabricChaincodeTemplates(namespace string) FabricChaincodeTemplateNamespaceLister
	FabricChaincodeTemplateListerExpansion
}

// fabricChaincodeTemplateLister implements the FabricChaincodeTemplateLister interface.
type fabricChaincodeTemplateLister struct {
	indexer cache.Indexer
}

// NewFabricChaincodeTemplateLister returns a new FabricChaincodeTemplateLister.
func NewFabricChaincodeTemplateLister(indexer cache.Indexer) FabricChaincodeTemplateLister {
	return &fabricChaincodeTemplateLister{indexer: indexer}
}

// List lists all FabricChaincodeTemplates in the indexer.
func (s *fabricChaincodeTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.FabricChaincodeTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FabricChaincodeTemplate))
	})
	return ret, err
}

// FabricChaincodeTemplates returns an object that can list and get FabricChaincodeTemplates.
func (s *fabricChaincodeTemplateLister) FabricChaincodeTemplates(namespace string) FabricChaincodeTemplateNamespaceLister {
	return fabricChaincodeTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FabricChaincodeTemplateNamespaceLister helps list and get FabricChaincodeTemplates.
// All objects returned here must be treated as read-only.
type FabricChaincodeTemplateNamespaceLister interface {
	// List lists all FabricChaincodeTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FabricChaincodeTemplate, err error)
	// Get retrieves the FabricChaincodeTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FabricChaincodeTemplate, error)
	FabricChaincodeTemplateNamespaceListerExpansion
}

// fabricChaincodeTemplateNamespaceLister implements the FabricChaincodeTemplateNamespaceLister
// interface.
type fabricChaincodeTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FabricChaincodeTemplates in the indexer for a given namespace.
func (s fabricChaincodeTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FabricChaincodeTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FabricChaincodeTemplate))
	})
	return ret, err
}

// Get retrieves the FabricChaincodeTemplate from the indexer for a given namespace and name.
func (s fabricChaincodeTemplateNamespaceLister) Get(name string) (*v1alpha1.FabricChaincodeTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("fabricchaincodetemplate"), name)
	}
	return obj.(*v1alpha1.FabricChaincodeTemplate), nil
}
